# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type AlarmMessage {
    id: ID!
    message: String!
    scope: Scope
    startTime: Long!
}

"""
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
\"License\"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
the trend alarm trigger times
"""
type AlarmTrend {
    numOfAlarm: [Int]!
}

type Alarms {
    msgs: [AlarmMessage!]!
    total: Int!
}

type Attribute {
    name: String!
    value: String!
}

"Trace basic info"
type BasicTrace {
    duration: Int!
    endpointNames: [String!]!
    isError: Boolean
    segmentId: String!
    start: String!
    traceIds: [String!]!
}

"""
The Call represents a directed distributed call,
from the `source` to the `target`.
"""
type Call {
    "The protocol and tech stack used in this distributed call"
    callType: String!
    detectPoint: DetectPoint!
    id: ID!
    source: ID!
    target: ID!
}

"""
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
\"License\"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
Query the cluster brief based on the given duration
"""
type ClusterBrief {
    numOfCache: Int!
    numOfDatabase: Int!
    numOfEndpoint: Int!
    numOfMQ: Int!
    numOfService: Int!
}

type Database {
    id: ID!
    name: String!
    type: String!
}

type Endpoint {
    id: ID!
    name: String!
}

type EndpointInfo {
    id: ID!
    name: String!
    serviceId: ID!
    serviceName: String!
}

type IntValues {
    values: [KVInt!]!
}

type KVInt {
    id: ID!
    """
    This is the value, the caller must understand the Unit.
    Such as:
    1. If ask for cpm metric, the unit and result should be count.
    2. If ask for response time (p99 or avg), the unit should be millisecond.
    """
    value: Long!
}

type KeyValue {
    key: String!
    value: String
}

"Log info"
type Log {
    content: String
    contentType: ContentType!
    endpointId: ID
    endpointName: String
    isError: Boolean
    serviceId: ID
    serviceInstanceId: ID
    serviceInstanceName: String
    serviceName: String
    statusCode: String
    timestamp: String!
    traceId: String
}

type LogEntity {
    data: [KeyValue!]
    time: Long!
}

"""
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
\"License\"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
The list of logs
"""
type Logs {
    logs: [Log!]!
    total: Int!
}

type Mutation {
    version: String
}

"Node in Topology"
type Node {
    """
    The global id of each node,
    1. Service id
    2. Endpoint id
    """
    id: ID!
    "It is a conjuecture node or real node, to represent a service or endpoint."
    isReal: Boolean!
    "The literal name of the #id."
    name: String!
    """
    The type name may be
    1. The service provider/middleware tech, such as: Tomcat, SpringMVC
    2. Conjectural Service, e.g. MySQL, Redis, Kafka
    """
    type: String
}

"Root node"
type Query {
    getAlarm(duration: Duration!, keyword: String, paging: Pagination!, scope: Scope): Alarms
    getAlarmTrend(duration: Duration!): AlarmTrend!
    "Database related meta info."
    getAllDatabases(duration: Duration!): [Database!]!
    getAllEndpointTopN(duration: Duration!, name: String!, order: Order!, topN: Int!): [TopNEntity!]!
    getAllServiceInstanceTopN(duration: Duration!, name: String!, order: Order!, topN: Int!): [TopNEntity!]!
    "Service related meta info."
    getAllServices(duration: Duration!): [Service!]!
    getEndpointInfo(endpointId: ID!): EndpointInfo
    getEndpointTopN(duration: Duration!, name: String!, order: Order!, serviceId: ID!, topN: Int!): [TopNEntity!]!
    "Query the topology, based on the given endpoint"
    getEndpointTopology(duration: Duration!, endpointId: ID!): Topology
    getGlobalBrief(duration: Duration!): ClusterBrief
    "Query the global topolgoy"
    getGlobalTopology(duration: Duration!): Topology
    getLinearIntValues(duration: Duration!, metric: MetricCondition!): IntValues
    getServiceInstanceTopN(duration: Duration!, name: String!, order: Order!, serviceId: ID!, topN: Int!): [TopNEntity!]!
    "Service intance query"
    getServiceInstances(duration: Duration!, serviceId: ID!): [ServiceInstance!]!
    "TopN is an aggregation query."
    getServiceTopN(duration: Duration!, name: String!, order: Order!, topN: Int!): [TopNEntity!]!
    "Query the topology, based on the given service"
    getServiceTopology(duration: Duration!, serviceId: ID!): Topology
    getThermodynamic(duration: Duration!, metric: MetricCondition!): Thermodynamic
    getTopNRecords(condition: TopNRecordsCondition!): [TopNRecord!]!
    getValues(duration: Duration!, metric: BatchMetricConditions!): IntValues
    queryBasicTraces(condition: TraceQueryCondition): TraceBrief
    queryLogs(condition: LogQueryCondition): Logs
    queryTrace(traceId: ID!): Trace
    """
    Endpoint query
    Consider there are huge numbers of endpoint,
    must use endpoint owner's service id, keyword and limit filter to do query.
    """
    searchEndpoint(keyword: String!, limit: Int!, serviceId: ID!): [Endpoint!]!
    searchService(serviceCode: String!): Service
    searchServices(duration: Duration!, keyword: String!): [Service!]!
    version: String
}

"""
Ref represents the link between the segment and its parents.
The parent(ref) may not exists, which means batch process.
The UI should display a list, representing the other trace IDs.
"""
type Ref {
    parentSegmentId: ID!
    parentSpanId: Int!
    traceId: ID!
    """
    Ref type represents why did the ref happen.
    Include: 1) CrossProcess 2) CrossThread
    """
    type: RefType!
}

type Service {
    id: ID!
    name: String!
}

type ServiceInstance {
    attributes: [Attribute!]!
    id: ID!
    language: Language!
    name: String!
}

type Span {
    component: String
    endTime: Long!
    endpointName: String
    isError: Boolean
    "There are 5 layers: Unknown, Database, RPCFramework, Http, MQ and Cache"
    layer: String
    logs: [LogEntity!]!
    parentSpanId: Int!
    "Peer network id, e.g. host+port, ip+port"
    peer: String
    refs: [Ref!]!
    segmentId: ID!
    serviceCode: String!
    spanId: Int!
    startTime: Long!
    tags: [KeyValue!]!
    traceId: ID!
    "There are three span types: Local, Entry and Exit"
    type: String!
}

type Thermodynamic {
    axisYStep: Int!
    """
    Each element in nodes represents a point in Thermodynamic Diagram
    And the element includes three values:
    1) Time Bucket based on query duration
    2) Response time index.
    Response time = [responseTimeStep * index, responseTimeStep * (index+1))
    The last element: [Response Time * index, MAX)
    3) The number of calls in this response time duration.

    Example:
    [ [0, 0, 10], [0, 1, 43], ...]
    These ^^^ two represent the left bottom element, and another element above it.
    """
    nodes: [[Int]!]!
}

"""
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
\"License\"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""
type TopNEntity {
    id: ID!
    name: String!
    value: Long!
}

type TopNRecord {
    latency: Long!
    statement: String
    """
    Have value, Only if the record has the trace id.
    Slow record
    """
    traceId: String
}

"""
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
\"License\"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
The overview topology of the whole application cluster or services,
"""
type Topology {
    calls: [Call!]!
    nodes: [Node!]!
}

"The trace represents a distributed trace, includes all segments and spans."
type Trace {
    spans: [Span!]!
}

"""
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
\"License\"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
The list of traces
"""
type TraceBrief {
    total: Int!
    traces: [BasicTrace!]!
}

enum ContentType {
    JSON
    NONE
    TEXT
}

enum DetectPoint {
    CLIENT
    PROXY
    SERVER
}

enum Language {
    DOTNET
    JAVA
    NODEJS
    PYTHON
    RUBY
    #For not language based agent, the language is impossible to tell.
    UNKNOWN
}

enum LogState {
    ALL
    ERROR
    SUCCESS
}

enum Order {
    ASC
    DES
}

enum QueryOrder {
    BY_DURATION
    BY_START_TIME
}

enum RefType {
    CROSS_PROCESS
    CROSS_THREAD
}

enum Scope {
    Endpoint
    EndpointRelation
    Service
    ServiceInstance
    ServiceInstanceRelation
    ServiceRelation
}

enum Step {
    DAY
    HOUR
    MINUTE
    MONTH
    SECOND
}

enum TraceState {
    ALL
    ERROR
    SUCCESS
}

input BatchMetricConditions {
    """
    Id in this metric type.
    In the above case, the id should be endpoint id.
    """
    ids: [ID!]!
    """
    Metric name, which should be defined in OAL script
    Such as:
    Endpoint_avg = from(Endpoint.latency).avg()
    Then, `Endpoint_avg`
    """
    name: String!
}

"""
The Duration defines the start and end time for each query operation.
Fields: `start` and `end`
represents the time span. And each of them matches the step.
ref https://www.ietf.org/rfc/rfc3339.txt
The time formats are
`SECOND` step: yyyy-MM-dd HHmmss
`MINUTE` step: yyyy-MM-dd HHmm
`HOUR` step: yyyy-MM-dd HH
`DAY` step: yyyy-MM-dd
`MONTH` step: yyyy-MM
Field: `step`
represents the accurate time point.
e.g.
if step==HOUR , start=2017-11-08 09, end=2017-11-08 19
then
metrics from the following time points expected
2017-11-08 9:00 -> 2017-11-08 19:00
there are 11 time points (hours) in the time span.
"""
input Duration {
    end: String!
    start: String!
    step: Step!
}

"Represent the conditions used for query logs"
input LogQueryCondition {
    endpointId: ID
    "Metric name of the log records"
    metricName: ID
    paging: Pagination!
    "The time range of log happened"
    queryDuration: Duration
    "The value of 0 means all services."
    serviceId: ID
    serviceInstanceId: ID
    state: LogState!
    stateCode: String
    traceId: String
}

"""
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
\"License\"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""
input MetricCondition {
    """
    Id in this metric type.
    In the above case, the id should be endpoint id.
    """
    id: ID
    """
    Metric name, which should be defined in OAL script
    Such as:
    Endpoint_avg = from(Endpoint.latency).avg()
    Then, `Endpoint_avg`
    """
    name: String!
}

input Pagination {
    "default false"
    needTotal: Boolean
    "pageNum starts in 1, the default is 1."
    pageNum: Int
    pageSize: Int!
}

"""
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
\"License\"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
Top N record query is different with aggregation Query.
Both of query results are top N, but aggregation topN query needs to do aggregation at query stage,
the top N record query is just do order and get the list.
Top N query is based on latency order by given service and metric name.
"""
input TopNRecordsCondition {
    duration: Duration!
    metricName: String!
    "Top N order, ASC or DES."
    order: Order!
    serviceId: ID!
    topN: Int!
}

"Represent the conditions used for query TraceBrief"
input TraceQueryCondition {
    endpointId: ID
    endpointName: String
    "The max time of trace"
    maxTraceDuration: Int
    "The mix time of trace"
    minTraceDuration: Int
    paging: Pagination!
    "The time range of traces started"
    queryDuration: Duration
    queryOrder: QueryOrder!
    "The value of 0 means all services."
    serviceId: ID
    serviceInstanceId: ID
    traceId: String
    traceState: TraceState!
}


"Long type"
scalar Long