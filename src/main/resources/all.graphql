
scalar Long

schema {
    query: Query
    mutation: Mutation
}

type TopNEntity {
    name: String!
    id: ID!
    value: Long!
}

extend type Query {

    getServiceTopN(name: String!, topN: Int!, duration: Duration!, order: Order!): [TopNEntity!]!
    getAllServiceInstanceTopN(name: String!, topN: Int!, duration: Duration!, order: Order!): [TopNEntity!]!
    getServiceInstanceTopN(serviceId: ID!, name: String!, topN: Int!, duration: Duration!, order: Order!): [TopNEntity!]!
    getAllEndpointTopN(name: String!, topN: Int!, duration: Duration!, order: Order!): [TopNEntity!]!
    getEndpointTopN(serviceId: ID!, name: String!, topN: Int!, duration: Duration!, order: Order!): [TopNEntity!]!
}

type AlarmTrend {
    numOfAlarm: [Int]!
}

type AlarmMessage {
    startTime: Long!
    scope: Scope
    id: ID!
    message: String!
}

type Alarms {
    msgs: [AlarmMessage!]!
    total: Int!
}

extend type Query {
    getAlarmTrend(duration: Duration!): AlarmTrend!
    getAlarm(duration: Duration!, scope: Scope, keyword: String, paging: Pagination!): Alarms

}

type ResultAlarm {
    code: Int!
    message: String!
}

extend type Query {
    operationAlarm(alarmstr: String,editstatus: Int): ResultAlarm
}
type BomsCall {
    callNum: [Long]!
    callSuccess: [Long]!
    callFail: [Long]!
}

extend type Query {
    getCall(duration: Duration!,id: String!): BomsCall!
}

type Query {
    version: String
}

type Mutation {
    version: String
}

input Duration {
    start: String!
    end: String!
    step: Step!
}

enum Step {
    MONTH
    DAY
    HOUR
    MINUTE
    SECOND
}

enum Order {
    ASC
    DES
}

input Pagination {

    pageNum: Int
    pageSize: Int!

    needTotal: Boolean
}

enum Language {

    UNKNOWN
    JAVA
    DOTNET
    NODEJS
    PYTHON
    RUBY
}

enum Scope {
    Service
    ServiceInstance
    Endpoint
    ServiceRelation
    ServiceInstanceRelation
    EndpointRelation
}

enum DetectPoint {
    CLIENT
    SERVER
    PROXY
}

type Logs {
    logs: [Log!]!
    total: Int!
}

type Log {
    serviceName: String
    serviceId: ID
    serviceInstanceName: String
    serviceInstanceId: ID
    endpointName: String
    endpointId: ID
    traceId: String
    timestamp: String!
    isError: Boolean
    statusCode: String
    contentType: ContentType!
    content: String
}

input LogQueryCondition {

    metricName: ID

    serviceId: ID
    serviceInstanceId: ID
    endpointId: ID
    traceId: String

    queryDuration: Duration
    state: LogState!
    stateCode: String
    paging: Pagination!
}

enum LogState {
    ALL
    SUCCESS
    ERROR
}

enum ContentType {
    TEXT
    JSON
    NONE
}

extend type Query {
    queryLogs(condition: LogQueryCondition): Logs
}

type ClusterBrief {
    numOfService: Int!
    numOfEndpoint: Int!
    numOfDatabase: Int!
    numOfCache: Int!
    numOfMQ: Int!
}

type Service {
    id: ID!
    name: String!
}

type ServiceInstance {
    id: ID!
    name: String!
    attributes: [Attribute!]!
    language: Language!
}

type Attribute {
    name: String!
    value: String!
}

type Endpoint {
    id: ID!
    name: String!
}

type EndpointInfo {
    id: ID!
    name: String!
    serviceId: ID!
    serviceName: String!
}

type Database {
    id: ID!
    name: String!
    type: String!
}

extend type Query {
    getGlobalBrief(duration: Duration!): ClusterBrief

    getAllServices(duration: Duration!): [Service!]!
    searchServices(duration: Duration!, keyword: String!): [Service!]!
    searchService(serviceCode: String!): Service

    getServiceInstances(duration: Duration!, serviceId: ID!): [ServiceInstance!]!

    searchEndpoint(keyword: String!, serviceId: ID!, limit: Int!): [Endpoint!]!
    getEndpointInfo(endpointId: ID!): EndpointInfo

    getAllDatabases(duration: Duration!): [Database!]!
}

input MetricCondition {

    name: String!

    id: ID
}

input BatchMetricConditions {

    name: String!

    ids: [ID!]!
}

type IntValues {
    values: [KVInt!]!
}

type KVInt {
    id: ID!

    value: Long!
}

type Thermodynamic {

    nodes: [[Int]!]!
    axisYStep: Int!
}

extend type Query {
    getValues(metric: BatchMetricConditions!, duration: Duration!): IntValues
    getLinearIntValues(metric: MetricCondition!, duration: Duration!): IntValues

    getThermodynamic(metric: MetricCondition!, duration: Duration!): Thermodynamic
}

input GroupMetricCondition {

    name: String!
    mappingKey: String!
    mappingValue: String!
}
type IntValueLabel {
    values: [KVIntLabel!]!
}

type KVIntLabel {
    id: ID!

    value: Long!
    serviceName: String!
}

extend type Query {
    getLinearIntValuesByLabel(metric: BatchMetricConditions!, duration: Duration!): IntValueLabel
}

type ServiceInventoryMappingRecord {
    name: String!
    serviceId: String!
    mappingKey: String!
    mappingValue: String!
}

type ServiceMetricQuery {
    name: String!
    serviceId: ID!
    serviceSla: Long!
    serviceCpm: Long!
    serviceRespTime: Long!
}

type ServiceReqTotalQuery {
    name: String!
    serviceId: ID!
    reqTotal: Long!
}

type ServiceRespTimeQuery {
    name: String!
    serviceId: ID!
    serviceRespTime: Long!
}

type ServiceReqSuccessNumberQuery {
    name: String!
    successNumber: Long!
    failNumber: Long!
}

extend type Query {

    getOrCreate(serviceId: String,mappingKey: String,mappingValue: String!): String
    getServiceInventoryMapping(mappingKey: String,mappingValue: String): [ServiceInventoryMappingRecord!]
    getServiceMetricQuery(names: [String]!,duration: Duration!): [ServiceMetricQuery!]
    getServiceReqTotalQuery(names: [String]!,duration: Duration!): [ServiceReqTotalQuery!]
    getServiceRespTimeQuery(names: [String]!,duration: Duration!): [ServiceRespTimeQuery!]
    getServiceReqSuccessNumber(names: [String]!,duration: Duration!): [ServiceReqSuccessNumberQuery!]
}

input TopNRecordsCondition {
    serviceId: ID!
    metricName: String!
    topN: Int!

    order: Order!
    duration: Duration!
}

type TopNRecord {
    statement: String
    latency: Long!

    traceId: String
}

extend type Query {
    getTopNRecords(condition: TopNRecordsCondition!): [TopNRecord!]!
}

type Topology {
    nodes: [Node!]!
    calls: [Call!]!
}

type Node {

    id: ID!

    name: String!

    type: String

    isReal: Boolean!
    nodeType: ID
}

type Call {
    source: ID!

    sourceComponents: [ID!]!
    target: ID!

    targetComponents: [ID!]!
    callType: String!
    id: ID!

    detectPoints: [DetectPoint!]!
}

enum NodeType {
    SERVICE
    ENDPOINT
    USER
}

extend type Query {

    getGlobalTopology(duration: Duration!): Topology

    getServiceTopology(serviceId: ID!, duration: Duration!): Topology

    getEndpointTopology(endpointId: ID!, duration: Duration!): Topology

}

input LabelDuration {
    appIds: [String]
    names: [String]
    start: String!
    end: String!
    step: Step!
}

extend type Query {

    getGlobalAppTopologyByLabel(duration: LabelDuration!): Topology

    getGlobalTopologyByLabel(duration: LabelDuration!): Topology
}

type TraceBrief {
    traces: [BasicTrace!]!
    total: Int!
}

type BasicTrace {
    segmentId: String!
    endpointNames: [String!]!
    duration: Int!
    start: String!
    isError: Boolean
    traceIds: [String!]!
}

input TraceQueryCondition {

    serviceId: ID
    serviceInstanceId: ID
    traceId: String
    endpointId: ID
    endpointName: String

    queryDuration: Duration

    minTraceDuration: Int

    maxTraceDuration: Int
    traceState: TraceState!
    queryOrder: QueryOrder!
    paging: Pagination!
    appId: String
    names: [String]
}

enum TraceState {
    ALL
    SUCCESS
    ERROR
}

enum QueryOrder {
    BY_START_TIME
    BY_DURATION
}

type Trace {
    spans: [Span!]!
}

type Span {
    traceId: ID!
    segmentId: ID!
    spanId: Int!
    parentSpanId: Int!
    refs: [Ref!]!
    serviceCode: String!
    startTime: Long!
    endTime: Long!
    endpointName: String

    type: String!

    peer: String
    component: String
    isError: Boolean

    layer: String
    tags: [KeyValue!]!
    logs: [LogEntity!]!
}

type Ref {
    traceId: ID!
    parentSegmentId: ID!
    parentSpanId: Int!

    type: RefType!
}

enum RefType {
    CROSS_PROCESS
    CROSS_THREAD
}

type KeyValue {
    key: String!
    value: String
}

type LogEntity {
    time: Long!
    data: [KeyValue!]
}

extend type Query {
    queryBasicTraces(condition: TraceQueryCondition): TraceBrief
    queryTrace(traceId: ID!): Trace
}
